{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","searchTitle","handleSearchTitle","selectedUser","handleSearchStatus","selectTodo","changeStatus","className","htmlFor","type","id","placeholder","value","onChange","name","map","todo","classNames","completed","checked","title","onClick","userId","url","getTodos","a","fetch","response","json","getUsers","CurrentUser","state","user","this","loadUserInfo","prevProps","props","setState","removeUserInfo","email","phone","React","Component","App","selectedUserId","event","target","copyTodos","filter","toLowerCase","includes","newTodoStatus","getSelectedTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.57083f6a.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  todos: Todo[],\n  selectedUser: (userId: number) => void,\n  searchTitle: string,\n  handleSearchTitle: (event: React.ChangeEvent<HTMLInputElement>) => void,\n  handleSearchStatus: (event: React.ChangeEvent<HTMLSelectElement>) => void,\n  selectTodo: string,\n  changeStatus: (userId: number) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  searchTitle,\n  handleSearchTitle,\n  selectedUser,\n  handleSearchStatus,\n  selectTodo,\n  changeStatus,\n}) => (\n\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n    <div className=\"TodoList__search\">\n      <label htmlFor=\"search-query\" className=\"label\">\n        Search todo\n        <div className=\"control\">\n          <input\n            type=\"text\"\n            id=\"search-query\"\n            className=\"TodoList__item\"\n            placeholder=\"Type search todo\"\n            value={searchTitle}\n            onChange={handleSearchTitle}\n          />\n        </div>\n      </label>\n    </div>\n\n    <div className=\"select\">\n      <select\n        name=\"selectTodo\"\n        value={selectTodo}\n        onChange={handleSearchStatus}\n        className=\"TodoList__item\"\n      >\n        <option value=\"all\">Show all</option>\n        <option value=\"active\">Active</option>\n        <option value=\"completed\">Completed</option>\n      </select>\n    </div>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            className={classNames('TodoList__item',\n              { 'TodoList__item--unchecked': !todo.completed },\n              { 'TodoList__item--checked': todo.completed })}\n            key={todo.id}\n          >\n            <label htmlFor=\"search-query\">\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                onChange={() => changeStatus(todo.id)}\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className=\"\n                TodoList__user-button\n                TodoList__user-button--selected\n                button\n              \"\n              type=\"button\"\n              onClick={() => selectedUser(+todo.userId)}\n            >\n              User #\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n","const url = 'https://mate.academy/students-api';\n\nexport async function getTodos(): Promise<Todo[]> {\n  const response = await fetch(`${url}/todos`);\n\n  return response.json();\n}\n\nexport async function getUsers(userId: number): Promise<User> {\n  const response = await fetch(`${url}/users/${userId}`);\n\n  return response.json();\n}\n","import React from 'react';\nimport './CurrentUser.scss';\n\nimport { getUsers } from '../../api';\n\ntype Props = {\n  userId: number,\n  removeUserInfo: () => void,\n};\n\ntype State = {\n  user: User | null,\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  async componentDidMount() {\n    this.loadUserInfo();\n  }\n\n  async componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadUserInfo();\n    }\n  }\n\n  async loadUserInfo() {\n    const { userId } = this.props;\n    const user = await getUsers(userId);\n\n    this.setState({\n      user,\n    });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { userId, removeUserInfo } = this.props;\n\n    return (\n      <div>\n        {user && (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                Selected user:\n                {userId}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={removeUserInfo}\n            >\n              Remove\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\ntype State = {\n  todos: Todo[],\n  selectedUserId: number,\n  searchTitle: string,\n  selectTodo: string,\n};\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    todos: [],\n    selectedUserId: 0,\n    searchTitle: '',\n    selectTodo: 'all',\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({\n      todos: [...todos],\n    });\n  }\n\n  handleSearchTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      searchTitle: event.target.value,\n    });\n  };\n\n  handleSearchStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({\n      selectTodo: event.target.value,\n    });\n  };\n\n  getTodos = () => {\n    const { searchTitle, todos, selectTodo } = this.state;\n\n    const copyTodos = todos.filter(todo => todo.title.toLowerCase()\n      .includes(searchTitle.toLowerCase()));\n\n    if (selectTodo === 'active') {\n      return copyTodos.filter(todo => !todo.completed);\n    }\n\n    if (selectTodo === 'completed') {\n      return copyTodos.filter(todo => todo.completed);\n    }\n\n    return copyTodos;\n  };\n\n  selectedUser = (selectedUserId: number) => {\n    this.setState({\n      selectedUserId,\n    });\n  };\n\n  removeUserInfo = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  changeStatus = (userId: number) => {\n    const { todos } = this.state;\n\n    const newTodoStatus = todos.map(todo => {\n      if (todo.id === userId) {\n        return { ...todo, completed: !todo.completed };\n      }\n\n      return todo;\n    });\n\n    this.setState({\n      todos: newTodoStatus,\n    });\n  };\n\n  render() {\n    const getSelectedTodos = this.getTodos();\n\n    const { selectedUserId, searchTitle, selectTodo } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={getSelectedTodos}\n            handleSearchTitle={this.handleSearchTitle}\n            searchTitle={searchTitle}\n            selectedUser={this.selectedUser}\n            handleSearchStatus={this.handleSearchStatus}\n            changeStatus={this.changeStatus}\n            selectTodo={selectTodo}\n\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                removeUserInfo={this.removeUserInfo}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}